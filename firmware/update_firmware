#!/bin/bash

: <<'DISCLAIMER'

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

This script is licensed under the terms of the MIT license.
Unless otherwise noted, code reproduced herein
was written for this script.

- The Pimoroni Crew -

DISCLAIMER

# script control variables

armhfonly="no" # whether the script is allowed to run on other arch
armv6="yes" # whether armv6 processors are supported
armv7="yes" # whether armv7 processors are supported
armv8="yes" # whether armv8 processors are supported
raspbianonly="no" # whether the script is allowed to run on other OSes
osreleases=( "Raspbian" "Mate" "PiTop" ) # list os-releases supported
oswarning=( "Debian" "Ubuntu" ) # list experimental os-releases
osdeny=( "Darwin" "Kali" ) # list os-releases specifically disallowed

pathoverride="yes"
dfubinpath="./dfu-programmer"
dockhexpath="./flotilla-dock.hex"
dockpytool="./firmware-version.py"
firmwarev="1.14"
servd="flotillad"

# function define

confirm() {
    if [ "$FORCE" == '-y' ]; then
        true
    else
        read -r -p "$1 [y/N] " response < /dev/tty
        if [[ $response =~ ^(yes|y|Y)$ ]]; then
            true
        else
            false
        fi
    fi
}

prompt() {
        read -r -p "$1 [y/N] " response < /dev/tty
        if [[ $response =~ ^(yes|y|Y)$ ]]; then
            true
        else
            false
        fi
}

success() {
    echo -e "$(tput setaf 2)$1$(tput sgr0)"
}

inform() {
    echo -e "$(tput setaf 6)$1$(tput sgr0)"
}

warning() {
    echo -e "$(tput setaf 1)$1$(tput sgr0)"
}

newline() {
    echo ""
}

sudocheck() {
    if [ $(id -u) -ne 0 ]; then
        echo -e "Install must be run as root. Try 'sudo ./$scriptname'\n"
        exit 1
    fi
}

arch_check() {
    IS_ARMHF=false
    IS_ARMv6=false
    IS_ARMv7=false
    IS_ARMv8=false
    IS_MACOSX=false
    IS_X86_32=false
    IS_X86_64=false

    machine=$(uname -m)
    
    if [ -n "$machine" ]; then
        case $machine in
           "armv6l") IS_ARMHF=true && IS_ARMv6=true;;
           "armv7l") IS_ARMHF=true && IS_ARMv7=true;;
           "armv8l") IS_ARMHF=true && IS_ARMv8=true;;
           "x86_64") IS_ARMHF=false && IS_X86_64=true;;
           "i386"|"i486"|"i586"|"i686") IS_X86_32=true;;
           *) warning "unidentified CPU" && exit 1;;
        esac
    elif uname -s | grep "Darwin" > /dev/null; then
        IS_MACOSX=true
    fi
}

os_check() {
    IS_RASPBIAN=false
    IS_MACOSX=false
    IS_SUPPORTED=false
    IS_EXPERIMENTAL=false

    if [ -f /etc/os-release ]; then
        if cat /etc/os-release | grep "Raspbian" > /dev/null; then
            IS_RASPBIAN=true
        fi
        if command -v apt-get > /dev/null; then
            for os in ${osreleases[@]}; do
                if cat /etc/os-release | grep $os > /dev/null; then
                    IS_SUPPORTED=true && IS_EXPERIMENTAL=false
                fi
            done
            for os in ${oswarning[@]}; do
                if cat /etc/os-release | grep $os > /dev/null; then
                    IS_SUPPORTED=false && IS_EXPERIMENTAL=true
                fi
            done
            for os in ${osdeny[@]}; do
                if cat /etc/os-release | grep $os > /dev/null; then
                    IS_SUPPORTED=false && IS_EXPERIMENTAL=false
                fi
            done
        fi
    fi
    if [ -f ~/.pt-dashboard-config ] || [ -d ~/.pt-dashboard ]; then
        IS_RASPBIAN=false
        for os in ${oswarning[@]}; do
            if [ $os == "PiTop" ]; then
                IS_SUPPORTED=false && IS_EXPERIMENTAL=true
            fi
        done
        for os in ${osdeny[@]}; do
            if [ $os == "PiTop" ]; then
                IS_SUPPORTED=false && IS_EXPERIMENTAL=false
            fi
        done
    fi
    if [ -d ~/.config/ubuntu-mate ]; then
        for os in ${osdeny[@]}; do
            if [ $os == "Mate" ]; then
                IS_SUPPORTED=false && IS_EXPERIMENTAL=false
            fi
        done
    fi
    if uname -s | grep "Darwin" > /dev/null; then
        IS_MACOSX=true
        for os in ${osdeny[@]}; do
            if [ $os == "Darwin" ]; then
                IS_SUPPORTED=false && IS_EXPERIMENTAL=false
            fi
        done
    fi
}

raspbian_check() {
    IS_SUPPORTED=false
    IS_EXPERIMENTAL=false

    if [ -f /etc/os-release ]; then
        if cat /etc/os-release | grep "/sid" > /dev/null; then
            IS_SUPPORTED=false && IS_EXPERIMENTAL=true
        elif cat /etc/os-release | grep "buster" > /dev/null; then
            IS_SUPPORTED=false && IS_EXPERIMENTAL=true
        elif cat /etc/os-release | grep "stretch" > /dev/null; then
            IS_SUPPORTED=false && IS_EXPERIMENTAL=true
        elif cat /etc/os-release | grep "jessie" > /dev/null; then
            IS_SUPPORTED=true && IS_EXPERIMENTAL=false
        elif cat /etc/os-release | grep "wheezy" > /dev/null; then
            IS_SUPPORTED=true && IS_EXPERIMENTAL=false
        else
            IS_SUPPORTED=false && IS_EXPERIMENTAL=false
        fi
    fi
}

servd_trig() {
    if command -v service > /dev/null; then
        sudo service $1 $2
    fi
}

: <<'MAINSTART'

Perform all variables declarations as well as function definition
above this section for clarity, thanks!

MAINSTART

arch_check
os_check
sudocheck

if ! $IS_ARMHF; then
    warning "This hardware is not supported, sorry!"
    warning "Config files have been left untouched"
    newline && exit 1
fi

if $IS_ARMv8 && [ $armv8 == "no" ]; then
    warning "Sorry, your CPU is not supported by this installer"
    newline && exit 1
elif $IS_ARMv7 && [ $armv7 == "no" ]; then
    warning "Sorry, your CPU is not supported by this installer"
    newline && exit 1
elif $IS_ARMv6 && [ $armv6 == "no" ]; then
    warning "Sorry, your CPU is not supported by this installer"
    newline && exit 1
fi

if [ $raspbianonly == "yes" ] && ! $IS_RASPBIAN;then
        warning "This script is intended for Raspbian on a Raspberry Pi!"
        newline && exit 1
fi

if $IS_RASPBIAN; then
    raspbian_check
    if ! $IS_SUPPORTED && ! $IS_EXPERIMENTAL; then
        newline && warning "--- Warning ---" && newline
        echo "The $productname installer"
        echo "does not work on this version of Raspbian."
        echo "Check https://github.com/$gitusername/$gitreponame"
        echo "for additional information and support"
        newline && exit 1
    fi
fi

if ! $IS_SUPPORTED && ! $IS_EXPERIMENTAL; then
        warning "Your operating system is not supported, sorry!"
        newline && exit 1
fi

if $IS_EXPERIMENTAL; then
    warning "Support for your operating system is experimental. Please visit"
    warning "forums.pimoroni.com if you experience issues with this product."
    newline
fi

if [ $pathoverride == "yes" ]; then
    if $IS_ARMHF; then
        dfubinpath="./raspi/dfu-programmer"
    elif $IS_MACOSX; then
        dfubinpath="./macosx/dfu-programmer"
    else
        dfubinpath="./linux/dfu-programmer-amd64"
        #dfubinpath="./linux/dfu-programmer-i386"
    fi
fi

echo "Flotilla Firmware Updater"

if [ -f $dockhexpath ] || [ -L $dockhexpath ]; then
    echo "dock firmware file found"
    newline
else
    warning "No flotilla-dock.hex file found. Exiting!"
    newline
    exit 1
fi

if python -c "import flotilla" 2>&1 >/dev/null | grep "No module named flotilla"; then
    echo "The flotilla Python API is not installed."
    echo "This is not essential to update the firmware"
    echo "but should you wish to you can install it using:"
    echo "\curl -sS get.pimoroni.com/flotilla | bash"
    newline
else
    servd_trig $servd stop
    success "Please plug in your Flotilla Dock now."
    read -rsp $'Press any key to continue...\n' -n1 key < /dev/tty
    newline
    echo "Reading current firmware version..."
    sleep 5
    if [ -f $dockpytool ]; then
        sudo python $dockpytool
        firmwared=$($dockpytool | grep "Version")
        if [[ "$firmwared" == "Version: $firmwarev" ]]; then
            newline
            echo "Your dock is already flashed with the latest firmware"
            if confirm "Would you like to reflash it anyway?"; then
                newline
            else
                newline
                servd_trig $servd start
                exit 1
            fi
        else
            echo "Your dock firmware will be updated to"
            echo "Version: $firmwarev"
            newline
            if [[ "$firmwared" < "Version: 1.00" ]]; then
                warning "Note: This update will break compatibility with older versions"
                warning "of flotilla and rockpool. Press CTRL+C now if you wish to abort."
                newline
                read -rsp $'Press any key to continue...\n' -n1 key < /dev/tty
            fi
        fi
    fi
fi

if command -v lsusb > /dev/null; then

    RESULT=$(lsusb -d 16d0:08c3)

    if [ ! -z "$RESULT" ]; then
        warning "Please unplug your Flotilla Dock!"
        while [ ! -z "$RESULT" ]; do
            RESULT=$(lsusb -d 16d0:08c3)
            sleep 0.01
        done
    fi

    newline
    success "Plug in your Flotilla Dock now."
    echo "Updating should continue automatically."
    newline

    while ! lsusb -d 03eb:2fe4; do
        sleep 0.01
    done

    sleep 0.2

    sudo $dfubinpath atxmega32a4u erase
    sudo $dfubinpath atxmega32a4u flash $dockhexpath

elif command -v ioreg > /dev/null; then

    HEXDOCK=$(ioreg | grep "Flotilla Dock")
    DFUDOCK=$(ioreg | grep "Flotilla DFU")

    if [ ! -z "$HEXDOCK" ]; then
        warning "Please unplug your Flotilla Dock!"
        while [ ! -z "$HEXDOCK" ]; do
            HEXDOCK=$(ioreg | grep "Flotilla Dock")
            sleep 0.01
        done
    fi

    newline
    success "Plug in your Flotilla Dock now."
    echo "Updating should continue automatically."
    newline

    while [ -z "$DFUDOCK" ]; do
        DFUDOCK=$(ioreg | grep "Flotilla DFU")
        sleep 0.01
    done

    sleep 0.2

    sudo $dfubinpath atxmega32a4u erase
    sudo $dfubinpath atxmega32a4u flash $dockhexpath
else
    warning "Please unplug your Flotilla Dock if it is plugged in!"
    sudo sleep 2
    newline
    success "Plug in your Flotilla Dock now."
    read -rsp $'Press any key to continue...\n' -n1 key < /dev/tty
    newline

    if sudo $dfubinpath atxmega32a4u erase 2>&1 | grep -q "no device present"; then
        warning "No Flotilla Dock detected!"
        exit 1
    fi
    sudo $dfubinpath atxmega32a4u flash $dockhexpath
fi
    servd_trig $servd start
    newline
    success "Dock Firmware Update completed"
    warning "Please unplug/replug your Flotilla Dock before use!"
    newline

exit 0
